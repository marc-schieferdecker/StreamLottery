#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('vertriebskoffer:server');
var http = require('http');
var https = require('https');
var path = require('path');
var fs = require('fs');
var config = require(path.join(__dirname, '..', 'config.json'));

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '80');
app.set('port', port);
var portSSL = normalizePort(process.env.PORTSSL || '443');
app.set('portSSL', portSSL);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create HTTPS server.
 */
var serverSSL = https.createServer({
  key: fs.readFileSync(path.join(__dirname, 'certstore', 'localhost-key.pem')).toString(),
  cert: fs.readFileSync(path.join(__dirname, 'certstore', 'localhost.pem')).toString()
}, app);
serverSSL.listen(portSSL);
serverSSL.on('error', onError);
serverSSL.on('listening', onListeningSSL);

/**
 * Socket.io connection handler
 */
var socket = require(path.join(__dirname, '..', 'src', 'socket')).socketHandler.init(config.forceSSL ? serverSSL : server);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
function onListeningSSL() {
  var addr = serverSSL.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
